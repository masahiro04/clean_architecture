// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecases/INTERACTOR.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "clean_architecture/golang/domain"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLogger) Log(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), arg0...)
}

// MockPresenter is a mock of Presenter interface.
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter.
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance.
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// GetBlog mocks base method.
func (m *MockPresenter) GetBlog(blog *domain.Blog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlog", blog)
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockPresenterMockRecorder) GetBlog(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockPresenter)(nil).GetBlog), blog)
}

// GetBlogs mocks base method.
func (m *MockPresenter) GetBlogs(blogs domain.BlogCollection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlogs", blogs)
}

// GetBlogs indicates an expected call of GetBlogs.
func (mr *MockPresenterMockRecorder) GetBlogs(blogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogs", reflect.TypeOf((*MockPresenter)(nil).GetBlogs), blogs)
}

// Present mocks base method.
func (m *MockPresenter) Present() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Present")
	ret0, _ := ret[0].(error)
	return ret0
}

// Present indicates an expected call of Present.
func (mr *MockPresenterMockRecorder) Present() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockPresenter)(nil).Present))
}

// Raise mocks base method.
func (m *MockPresenter) Raise(errorKind domain.ErrorKinds, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Raise", errorKind, err)
}

// Raise indicates an expected call of Raise.
func (mr *MockPresenterMockRecorder) Raise(errorKind, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raise", reflect.TypeOf((*MockPresenter)(nil).Raise), errorKind, err)
}

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(targetStruct interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", targetStruct)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(targetStruct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), targetStruct)
}

// MockDBTransaction is a mock of DBTransaction interface.
type MockDBTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionMockRecorder
}

// MockDBTransactionMockRecorder is the mock recorder for MockDBTransaction.
type MockDBTransactionMockRecorder struct {
	mock *MockDBTransaction
}

// NewMockDBTransaction creates a new mock instance.
func NewMockDBTransaction(ctrl *gomock.Controller) *MockDBTransaction {
	mock := &MockDBTransaction{ctrl: ctrl}
	mock.recorder = &MockDBTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBTransaction) EXPECT() *MockDBTransactionMockRecorder {
	return m.recorder
}

// WithTx mocks base method.
func (m *MockDBTransaction) WithTx(runner func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", runner)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockDBTransactionMockRecorder) WithTx(runner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockDBTransaction)(nil).WithTx), runner)
}

// MockBlogRW is a mock of BlogRW interface.
type MockBlogRW struct {
	ctrl     *gomock.Controller
	recorder *MockBlogRWMockRecorder
}

// MockBlogRWMockRecorder is the mock recorder for MockBlogRW.
type MockBlogRWMockRecorder struct {
	mock *MockBlogRW
}

// NewMockBlogRW creates a new mock instance.
func NewMockBlogRW(ctrl *gomock.Controller) *MockBlogRW {
	mock := &MockBlogRW{ctrl: ctrl}
	mock.recorder = &MockBlogRWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogRW) EXPECT() *MockBlogRWMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBlogRW) Create(company domain.Blog) (*domain.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", company)
	ret0, _ := ret[0].(*domain.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBlogRWMockRecorder) Create(company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlogRW)(nil).Create), company)
}

// CreateTx mocks base method.
func (m *MockBlogRW) CreateTx(company domain.Blog, tx *sql.Tx) (*domain.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", company, tx)
	ret0, _ := ret[0].(*domain.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockBlogRWMockRecorder) CreateTx(company, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockBlogRW)(nil).CreateTx), company, tx)
}

// Delete mocks base method.
func (m *MockBlogRW) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBlogRWMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBlogRW)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockBlogRW) GetAll() ([]*domain.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockBlogRWMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBlogRW)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockBlogRW) GetById(id int) (*domain.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*domain.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBlogRWMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBlogRW)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockBlogRW) Update(id int, company domain.Blog) (*domain.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, company)
	ret0, _ := ret[0].(*domain.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBlogRWMockRecorder) Update(id, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlogRW)(nil).Update), id, company)
}
